/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guidemo;

import guidemo.helpers.ChartCreator;
import guidemo.helpers.DateCellEditor;
import guidemo.helpers.DateCellRender;
import guidemo.helpers.DateTimeTableEditor;
import guidemo.helpers.XlsReader;
import guidemo.helpers.XlsWriter;
import guidemo.models.PredictingWaterDetail;
import guidemo.models.ReticEntry;
import guidemo.models.WaterDetail;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.knowm.xchart.QuickChart;
import org.knowm.xchart.SwingWrapper;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.XYChartBuilder;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYSeries;
import org.knowm.xchart.XYSeries.XYSeriesRenderStyle;
import org.knowm.xchart.style.Styler.LegendPosition;

public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        this.currDirectoryPath = "";
        initComponents();
        initLogo();
        initTableEditor();
        initWarningLabels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        filePathTextField = new javax.swing.JTextField();
        browserFileButton = new javax.swing.JButton();
        reticDataEntryTable = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        jButtonAdd = new javax.swing.JButton();
        jButtonWaterSave = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableReticData = new javax.swing.JTable();
        jButtonAddReticData = new javax.swing.JButton();
        jButtonSaveRetic = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanelNitrification = new javax.swing.JPanel();
        jPanelChrloramin = new javax.swing.JPanel();
        jPanelForecasting = new javax.swing.JPanel();
        jPanelRetic = new javax.swing.JPanel();
        jPanelNitrificationFull = new javax.swing.JPanel();
        jPanelNitrificationFullChart = new javax.swing.JPanel();
        jPanelNitrificationFullLabel = new javax.swing.JLabel();
        jPanelChloramineFull = new javax.swing.JPanel();
        jPanelChloramineFullChart = new javax.swing.JPanel();
        jPanelChloramineFullLabel = new javax.swing.JLabel();
        jPanelForecastingFull = new javax.swing.JPanel();
        jPanelForecastingFullChart = new javax.swing.JPanel();
        jPanelForecastingFullLabel = new javax.swing.JLabel();
        jPanelReticFull = new javax.swing.JPanel();
        jPanelReticFullLabel = new javax.swing.JLabel();
        jPanelReticFullChart = new javax.swing.JPanel();
        jPanelLogo = new javax.swing.JPanel();
        jLabelLogo = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Read xls file");

        jLabel1.setText("File Path");
        jLabel1.setToolTipText("File path lead to xls file");

        filePathTextField.setEditable(false);
        filePathTextField.setToolTipText("");

        browserFileButton.setText("Load File");
        browserFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browserFileButtonActionPerformed(evt);
            }
        });

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "TCI_in", "TCLI_out", "Temp", "NH3-N", "NO2-N", "Krt", "Krt20", "Tablet Dosed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(dataTable);
        if (dataTable.getColumnModel().getColumnCount() > 0) {
            dataTable.getColumnModel().getColumn(0).setMinWidth(100);
        }

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonWaterSave.setText("Save");
        jButtonWaterSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWaterSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1385, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(1304, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAdd, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonWaterSave, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonWaterSave)
                .addContainerGap())
        );

        reticDataEntryTable.addTab("Reservior Data Entry", jPanel1);

        jTableReticData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Total Chlorine", "Temperature", "NH3-N", "NO2-N", "Nitrification Potential Indicator"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableReticData);
        if (jTableReticData.getColumnModel().getColumnCount() > 0) {
            jTableReticData.getColumnModel().getColumn(0).setMinWidth(250);
        }

        jButtonAddReticData.setText("Add");
        jButtonAddReticData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddReticDataActionPerformed(evt);
            }
        });

        jButtonSaveRetic.setText("Save");
        jButtonSaveRetic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveReticActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1385, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAddReticData, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonSaveRetic, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAddReticData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSaveRetic)
                .addContainerGap())
        );

        reticDataEntryTable.addTab("Retic Data Entry", jPanel2);

        jPanel6.setLayout(new java.awt.GridLayout(2, 0));

        jPanelNitrification.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jPanelNitrification);

        jPanelChrloramin.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jPanelChrloramin);

        jPanelForecasting.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jPanelForecasting);

        jPanelRetic.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jPanelRetic);

        reticDataEntryTable.addTab("Diagrams", jPanel6);

        jPanelNitrificationFullChart.setLayout(new java.awt.BorderLayout());

        jPanelNitrificationFullLabel.setText("jLabel2");

        javax.swing.GroupLayout jPanelNitrificationFullLayout = new javax.swing.GroupLayout(jPanelNitrificationFull);
        jPanelNitrificationFull.setLayout(jPanelNitrificationFullLayout);
        jPanelNitrificationFullLayout.setHorizontalGroup(
            jPanelNitrificationFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNitrificationFullLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNitrificationFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNitrificationFullLayout.createSequentialGroup()
                        .addComponent(jPanelNitrificationFullLabel)
                        .addGap(0, 1328, Short.MAX_VALUE))
                    .addComponent(jPanelNitrificationFullChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelNitrificationFullLayout.setVerticalGroup(
            jPanelNitrificationFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNitrificationFullLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNitrificationFullChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelNitrificationFullLabel)
                .addContainerGap())
        );

        reticDataEntryTable.addTab("Nitrification Potential Indicator", jPanelNitrificationFull);

        jPanelChloramineFullChart.setLayout(new java.awt.BorderLayout());

        jPanelChloramineFullLabel.setText("jLabel2");

        javax.swing.GroupLayout jPanelChloramineFullLayout = new javax.swing.GroupLayout(jPanelChloramineFull);
        jPanelChloramineFull.setLayout(jPanelChloramineFullLayout);
        jPanelChloramineFullLayout.setHorizontalGroup(
            jPanelChloramineFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChloramineFullLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChloramineFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChloramineFullLayout.createSequentialGroup()
                        .addComponent(jPanelChloramineFullChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanelChloramineFullLayout.createSequentialGroup()
                        .addComponent(jPanelChloramineFullLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelChloramineFullLayout.setVerticalGroup(
            jPanelChloramineFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChloramineFullLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanelChloramineFullChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelChloramineFullLabel)
                .addContainerGap())
        );

        reticDataEntryTable.addTab("Chloramine Stability", jPanelChloramineFull);

        jPanelForecastingFullChart.setLayout(new java.awt.BorderLayout());

        jPanelForecastingFullLabel.setText("jLabel3");

        javax.swing.GroupLayout jPanelForecastingFullLayout = new javax.swing.GroupLayout(jPanelForecastingFull);
        jPanelForecastingFull.setLayout(jPanelForecastingFullLayout);
        jPanelForecastingFullLayout.setHorizontalGroup(
            jPanelForecastingFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelForecastingFullLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelForecastingFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelForecastingFullLayout.createSequentialGroup()
                        .addComponent(jPanelForecastingFullLabel)
                        .addGap(0, 1328, Short.MAX_VALUE))
                    .addComponent(jPanelForecastingFullChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelForecastingFullLayout.setVerticalGroup(
            jPanelForecastingFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelForecastingFullLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelForecastingFullChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelForecastingFullLabel)
                .addContainerGap())
        );

        reticDataEntryTable.addTab("Forecasting residual", jPanelForecastingFull);

        jPanelReticFullLabel.setText("jLabel4");

        jPanelReticFullChart.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanelReticFullLayout = new javax.swing.GroupLayout(jPanelReticFull);
        jPanelReticFull.setLayout(jPanelReticFullLayout);
        jPanelReticFullLayout.setHorizontalGroup(
            jPanelReticFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReticFullLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelReticFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelReticFullLayout.createSequentialGroup()
                        .addComponent(jPanelReticFullLabel)
                        .addGap(0, 1328, Short.MAX_VALUE))
                    .addComponent(jPanelReticFullChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelReticFullLayout.setVerticalGroup(
            jPanelReticFullLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelReticFullLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelReticFullChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelReticFullLabel)
                .addContainerGap())
        );

        reticDataEntryTable.addTab("Retic system behaviour", jPanelReticFull);

        javax.swing.GroupLayout jPanelLogoLayout = new javax.swing.GroupLayout(jPanelLogo);
        jPanelLogo.setLayout(jPanelLogoLayout);
        jPanelLogoLayout.setHorizontalGroup(
            jPanelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLogoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelLogo, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelLogoLayout.setVerticalGroup(
            jPanelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLogoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelLogo, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(reticDataEntryTable))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browserFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(filePathTextField))
                        .addGap(12, 12, 12)
                        .addComponent(jPanelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browserFileButton))
                    .addComponent(jPanelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reticDataEntryTable)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void initLogo() {
        String pathToImage = "resources/logo.png";
        
        ImageIcon logoIcon = new ImageIcon(getClass().getClassLoader().getResource(pathToImage));
        Image scaledIcon;
        scaledIcon = logoIcon.getImage().getScaledInstance(
                this.jLabelLogo.getWidth(),
                this.jLabelLogo.getHeight(),
                Image.SCALE_SMOOTH);
                
        this.jLabelLogo.setIcon(new ImageIcon(scaledIcon));
    }
    
    private void initTableEditor() {
        TableColumn dateColumn = this.dataTable.getColumnModel().getColumn(0);
        DateTimeTableEditor editor = new DateTimeTableEditor();
        dateColumn.setCellEditor(editor);
       	dateColumn.setCellRenderer(new DateCellRender());
        DefaultTableModel model = (DefaultTableModel)this.dataTable.getModel();
        model.addTableModelListener((TableModelEvent e) -> {
            
            if (e.getType() == 1){
                return;
            }
            
            int row = e.getFirstRow();
            int column = e.getColumn();
            DefaultTableModel model1 = (DefaultTableModel)e.getSource();
            String columnName = model1.getColumnName(column);
            
            WaterDetail wd = this.detailArray.get(row);
            
            switch(column) {
                case 0: //Date
                    String tempDate = (String)model1.getValueAt(row, column);
                    //wd.date = parseDateFromString(tempDate, "dd-MM-yyyy HH:mm");
                    wd.date = parseDateFromString(tempDate, "dd-MM-yyyy");

                    break;
                case 1: //Date
                    wd.tciIn = (float) model1.getValueAt(row, column);
                    break;
                case 2: //Date
                    wd.tciOut = (float) model1.getValueAt(row, column);
                    break;
                case 3: //Date
                    wd.temperature = (float) model1.getValueAt(row, column);
                    break;
                case 4: //Date
                    wd.nh3 = (float) model1.getValueAt(row, column);
                    break;
                case 5: //Date
                    wd.no2 = (float) model1.getValueAt(row, column);
                    break;
                case 6: //Date
                    wd.dosed = (boolean) model1.getValueAt(row, column);
                 case 7: //Date
                    wd.krt = (float) model1.getValueAt(row, column);
                  case 8: //Date
                    wd.krt20 = (float) model1.getValueAt(row, column);
                    break;
                    
                default:
                    break;
            }
            
            if(column != -1) {
                wd.calculateValue();
                this.detailArray.set(row, wd);
                
                if (row == this.detailArray.size() - 1) {
                    this.setChloramineWarningText((WaterDetail[]) this.detailArray.toArray());
                    this.setNitritionWarningText((WaterDetail[]) this.detailArray.toArray());
                }
            }
        });
        
        TableColumn dateRedicColumn = this.jTableReticData.getColumnModel().getColumn(0);
        dateRedicColumn.setCellEditor(new DateTimeTableEditor());
       	dateRedicColumn.setCellRenderer(new DateCellRender());
        DefaultTableModel redicModel = (DefaultTableModel)this.jTableReticData.getModel();
        redicModel.addTableModelListener((TableModelEvent e) -> {
            if (e.getType() == 1){
                return;
            }
            
            int row = e.getFirstRow();
            int column = e.getColumn();
            DefaultTableModel model1 = (DefaultTableModel)e.getSource();
            String columnName = model1.getColumnName(column);
            
            ReticEntry re = this.reticEntryArray.get(row);
            
            switch(column) {
                case 0: //Date
                    String tempDate = (String)model1.getValueAt(row, column);
                    //re.date = parseDateFromString(tempDate, "dd-MM-yyyy HH:mm");
                    re.date = parseDateFromString(tempDate, "dd-MM-yyyy");

                    break;
                case 1: //Date
                    re.totalChlorine = (float) model1.getValueAt(row, column);
                    break;
                case 2: //Date
                    re.temperature = (float) model1.getValueAt(row, column);
                    break;
                case 3: //Date
                    re.nh3 = (float) model1.getValueAt(row, column);
                    break;
            }
            
            if(column != -1){
                re.calculateValue();
                this.reticEntryArray.set(row, re);
                
                if (row == this.reticEntryArray.size() - 1) {
                    this.setReticWarningText((ReticEntry[]) this.reticEntryArray.toArray());
                }
            }
        });
        
    }
    
    private void initWarningLabels() {
        jPanelChloramineFullLabel.setText("");
        jPanelForecastingFullLabel.setText("");
        jPanelReticFullLabel.setText("");
        jPanelNitrificationFullLabel.setText("");
    }
    
    private void setDataToTable(WaterDetail[] data) {
        DefaultTableModel model = (DefaultTableModel) this.dataTable.getModel();

        if (model.getRowCount() > 0) {
            for (int i = 0; i < model.getRowCount(); i++) {
                model.removeRow(i);
            }
        }

        for (WaterDetail dt : data) {
            model.addRow(new Object[]{
                dt.date,
                dt.tciIn,
                dt.tciOut,
                dt.temperature,
                dt.nh3,
                dt.no2,
                dt.krt,
                dt.krt20,
                dt.dosed,
                false
            });
        }
        
    }
    
    private Date parseDateFromString(String dateStr, String format) {
        String startDateString = dateStr;

        // This object can interpret strings representing dates in the format MM/dd/yyyy
        DateFormat df = new SimpleDateFormat(format); 
        
        try {
            return df.parse(startDateString);
        } catch (ParseException ex) {
            return new Date();
        }
    }
    
    private void setDataToReticTable(ReticEntry[] data) {
        DefaultTableModel model = (DefaultTableModel) this.jTableReticData.getModel();

        if (model.getRowCount() > 0) {
            for (int i = 0; i < model.getRowCount(); i++) {
                model.removeRow(i);
            }
        }

        for (ReticEntry dt : data) {
            model.addRow(new Object[]{
                dt.date,
                dt.totalChlorine,
                dt.temperature,
                dt.nh3,
                dt.no2,
                dt.nitrificationPotentialIndicator
            });
        }
    }

    private void generateReticChart(ReticEntry[] data) {
        // Show it
        JPanel chartView = ChartCreator.generateReticChart(data);
        this.jPanelRetic.removeAll();
        this.jPanelRetic.add(chartView, BorderLayout.CENTER);
        this.jPanelRetic.validate();
        
        JPanel chartViewFull = ChartCreator.generateReticChart(data);
        this.jPanelReticFullChart.removeAll();
        this.jPanelReticFullChart.add(chartViewFull, BorderLayout.CENTER);
        this.jPanelReticFullChart.validate();
        
        this.setReticWarningText(data);
    }
    
    private void setReticWarningText(ReticEntry[] data) {
        boolean isWarning = false;
        if (data.length > 0) {
            ReticEntry last = data[data.length - 1];
            double val = last.nitrificationPotentialIndicator;
            
            if(val >= 0.2 && val <= 0.4) {
                isWarning = true;
            } else {
                isWarning = false;
            }
        } else {
            isWarning = true;
        }
        
        if(isWarning){
            this.jPanelReticFullLabel.setText("0.2 <= value <= 0.4");
            this.jPanelReticFullLabel.setForeground(Color.red);
        } else {
            this.jPanelReticFullLabel.setText("No warning");
            this.jPanelReticFullLabel.setForeground(Color.blue);
        }
    }

    private void generateForecastingChart(WaterDetail[] data) {
        
        // Show it
        JPanel chartView = ChartCreator.generateForecastingChart(data);
        this.jPanelForecasting.removeAll();
        this.jPanelForecasting.add(chartView, BorderLayout.CENTER);
        this.jPanelForecasting.validate();
        
        JPanel chartViewFull = ChartCreator.generateForecastingChart(data);
        this.jPanelForecastingFullChart.removeAll();
        this.jPanelForecastingFullChart.add(chartViewFull, BorderLayout.CENTER);
        this.jPanelForecastingFullChart.validate();
    }

    private void generateChloramineChart(WaterDetail[] data) {
        // Show it
        JPanel chartView = ChartCreator.generateChloramineChart(data);
        JPanel chartViewFull = ChartCreator.generateChloramineChart(data);
        this.jPanelChrloramin.removeAll();
        this.jPanelChrloramin.add(chartView, BorderLayout.CENTER);
        this.jPanelChrloramin.validate();
        
        this.jPanelChloramineFullChart.removeAll();
        this.jPanelChloramineFullChart.add(chartViewFull, BorderLayout.CENTER);
        this.jPanelChloramineFullChart.validate();
        
        this.setChloramineWarningText(data);
    }
    
    private void setChloramineWarningText(WaterDetail[] data) {
        boolean isWarning = false;
        if (data.length > 0) {
            WaterDetail last = data[data.length - 1];
            double val = last.krt20;
            
            if(val >= 0.2 && val <= 0.4) {
                isWarning = true;
            } else {
                isWarning = false;
            }
        } else {
            isWarning = true;
        }
        
        if (isWarning){
            this.jPanelChloramineFullLabel.setText("0.2 <= value <= 0.4");
            this.jPanelChloramineFullLabel.setForeground(Color.red);
        } else {
            this.jPanelChloramineFullLabel.setText("No warning");
            this.jPanelChloramineFullLabel.setForeground(Color.blue);
        }
    }

    private void generateNitrificationChart(WaterDetail[] data) {
        // Create Chart
        JPanel chartView = ChartCreator.generateNitrificationPotentialChart(data);
        JPanel chartViewFull = ChartCreator.generateNitrificationPotentialChart(data);
                
        this.jPanelNitrification.removeAll();
        this.jPanelNitrification.add(chartView, BorderLayout.CENTER);
        this.jPanelNitrification.validate();
        
        this.jPanelNitrificationFullChart.removeAll();
        this.jPanelNitrificationFullChart.add(chartViewFull, BorderLayout.CENTER);
        this.jPanelNitrificationFullChart.validate();
        
        this.setNitritionWarningText(data);
    }
    
    private void setNitritionWarningText(WaterDetail[] data) {
        
        boolean isWarning = false;
        if (data.length > 0) {
            WaterDetail last = data[data.length - 1];
            double val = last.tclBRC;
            
            if (val >= 0.2 && val <= 0.4) {
                isWarning = true;
            } else {
                isWarning = false;
            }
        } else {
            isWarning = true;
        }
        
        if (isWarning){
            this.jPanelNitrificationFullLabel.setText("0.2 <= value <= 0.4");
            this.jPanelNitrificationFullLabel.setForeground(Color.red);
        } else {
            this.jPanelNitrificationFullLabel.setText("No warning");
            this.jPanelNitrificationFullLabel.setForeground(Color.blue);
        }
    }

    private String currDirectoryPath;
    private String currFileName;
    private ArrayList<WaterDetail> detailArray = new ArrayList<>();
    private ArrayList<ReticEntry> reticEntryArray = new ArrayList<>();
    
    private void browserFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browserFileButtonActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser(currDirectoryPath);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "XLSX Files", "xlsx", "xls");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(MainJFrame.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            this.currDirectoryPath = file.getParent();
            this.filePathTextField.setText(file.getAbsolutePath());
            this.currFileName = file.getAbsolutePath();

            // Load file
            WaterDetail[] data = XlsReader.readWaterInfo(currFileName, 3, 0);
            ReticEntry[] reticData = XlsReader.readReticInfo(currFileName, 3, 0);

            this.detailArray = new ArrayList<>(Arrays.asList(data));
            this.reticEntryArray = new ArrayList<>(Arrays.asList(reticData));
            
            setDataToTable(data);
            setDataToReticTable(reticData);
            generateNitrificationChart(data);
            generateChloramineChart(data);
            generateForecastingChart(data);
            generateReticChart(reticData);
        }
    }//GEN-LAST:event_browserFileButtonActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) this.dataTable.getModel();
        
        if (this.detailArray.size() > 0) {
            WaterDetail newData = new WaterDetail(
                    new Date(), 0, 0, 0, 0, 0, ""
            );
            this.detailArray.add(newData);
            
            Object[] rowData = new Object[]{
                newData.date,
                newData.tciIn,
                newData.tciOut,
                newData.temperature,
                newData.nh3,
                newData.no2,
                newData.krt,
                newData.krt20,
                newData.dosed,
            };
            model.addRow(rowData);
            
            this.dataTable.setModel(model);
            model.fireTableDataChanged();
            
            this.dataTable.scrollRectToVisible(
                    this.dataTable.getCellRect(
                            this.dataTable.getRowCount() - 1, 0, true
                    )
            );
//            generateNitrificationChart(newArray);
//            generateChloramineChart(newArray);
//            generateForecastingChart(newArray);
//            generateReticChart(newArray);
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonSaveReticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveReticActionPerformed
        // TODO add your handling code here:
        if(this.reticEntryArray.size() <= 0) {
            return ;
        }
        
        // TODO add your handling code here:
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Save your data?","Confirmation",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            // Saving code here
            writeReticDataToFile(this.currFileName, this.reticEntryArray);
        }
        
        
        
    }//GEN-LAST:event_jButtonSaveReticActionPerformed

    private void jButtonAddReticDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddReticDataActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) this.jTableReticData.getModel();
        
        if (this.reticEntryArray.size() > 0) {
            ReticEntry newData = new ReticEntry(new Date(), 0, 0, 0, 0);
            this.reticEntryArray.add(newData);
            
            Object[] rowData = new Object[]{
                newData.date,
                newData.totalChlorine,
                newData.temperature,
                newData.nh3,
                newData.no2,
                newData.nitrificationPotentialIndicator
            };
            model.addRow(rowData);
            
            this.jTableReticData.setModel(model);
            model.fireTableDataChanged();
            
            this.jTableReticData.scrollRectToVisible(
                    this.jTableReticData.getCellRect(
                            this.jTableReticData.getRowCount() - 1, 0, true
                    )
            );
        }
    }//GEN-LAST:event_jButtonAddReticDataActionPerformed

    private void jButtonWaterSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWaterSaveActionPerformed
        // TODO add your handling code here:
        if(this.detailArray.size() <= 0) {
            return ;
        }
        
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Save your data?","Confirmation",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            // Saving code here
            XlsWriter.writeWaterData(this.currFileName, this.detailArray, 3, 0);
        }
        
    }//GEN-LAST:event_jButtonWaterSaveActionPerformed

    public void writeReticDataToFile(String fileName, ArrayList<ReticEntry> data) {
        XlsWriter.writeReticData(fileName, data, 3, 0);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browserFileButton;
    private javax.swing.JTable dataTable;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddReticData;
    private javax.swing.JButton jButtonSaveRetic;
    private javax.swing.JButton jButtonWaterSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelLogo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelChloramineFull;
    private javax.swing.JPanel jPanelChloramineFullChart;
    private javax.swing.JLabel jPanelChloramineFullLabel;
    private javax.swing.JPanel jPanelChrloramin;
    private javax.swing.JPanel jPanelForecasting;
    private javax.swing.JPanel jPanelForecastingFull;
    private javax.swing.JPanel jPanelForecastingFullChart;
    private javax.swing.JLabel jPanelForecastingFullLabel;
    private javax.swing.JPanel jPanelLogo;
    private javax.swing.JPanel jPanelNitrification;
    private javax.swing.JPanel jPanelNitrificationFull;
    private javax.swing.JPanel jPanelNitrificationFullChart;
    private javax.swing.JLabel jPanelNitrificationFullLabel;
    private javax.swing.JPanel jPanelRetic;
    private javax.swing.JPanel jPanelReticFull;
    private javax.swing.JPanel jPanelReticFullChart;
    private javax.swing.JLabel jPanelReticFullLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableReticData;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTabbedPane reticDataEntryTable;
    // End of variables declaration//GEN-END:variables
}
